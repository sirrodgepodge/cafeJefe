// Stored values
$phone-max: 767px;
$tablet-min: 768px;
$tablet-max: 991px;
$laptop-min: 992px;
$grayish-yellowish: #e1ded9;
$main-color: #900d13;
$title-height: 11.5;


// Add Square Root function
@function sqrt($r) {
  $x0: 1;
  $x1: $x0;
 
  @for $i from 1 through 10 {
    $x1: $x0 - ($x0 * $x0 - abs($r)) / (2 * $x0);
    $x0: $x1;
  }
 
  @return $x1;
}


// Add function to strip the units from a variable
@function stripUnits($number) {
  @return $number / ($number * 0 + 1);
}


// Handle vendor prefixes
@mixin vend($prop, $val) {
    -webkit-#{$prop}: $val;
    -moz-#{$prop}: $val;
    -ms-#{$prop}: $val;
    -o-#{$prop}: $val;
    #{$prop}: $val;
}


// Do text-shadow (not used at present)
@mixin text-trace($color, $px) {
    text-shadow: -$px #{-$px} 0 $color, 
                 $px #{-$px} 0 $color, 
                 -$px $px 0 $color, 
                 $px $px 0 $color;
}


// Base formatting
html, body {
    margin: 0;
    width: 100%;
    padding: 0;
    position: absolute;
    z-index: 0;
    cursor: default;
}

body * {
    position: relative;
}

hr {
    padding: 0;
    border-top: 0;
    margin: 0;
    width: 100%;
    clear: both;
}

a, a:hover, a:visited {
    color: white;
    text-decoration: none;
    transition: .25s;
}


// For jQuery use
.show {
    opacity: 1!important;
    visibility: visible!important;
}

.dim {
    opacity: .12!important;
}

.fade-out {
    opacity: 0!important;
}

.disable-link {
   pointer-events: none;
   cursor: default;
}
.disable-link:hover {
    text-shadow: none;
}


// For contact section

//// Contact image dimensions
@function contactWidthCalc($size) {
    @return $size*559/581; //ratio comes from svg implicit height/width
}

//// Height and width of contact image
////// Height value drives all other calculations ///////
$contact-side: 40vh;
$contact-margin-top: 18vh;

//// Border width & margin
$contact-border-width: $contact-side/8;
$contact-margin: $contact-margin-top 0 $contact-border-width/1.75;

//// Centering images behind contact and hanfling pop-out
@mixin contactImgInit($name, $size-pct, $bg-color, $transition-time, $side, $dir-pct, $perp-pct) {
    //// For pushing images out
    $contact-side-strip: stripUnits($contact-side);
    $contact-border-width-strip: stripUnits($contact-border-width);
    $denom: 2*$contact-border-width-strip/$contact-side-strip;
    $img-size: $size-pct*$contact-side;

    .#{$name} {
        @include vend(transition, ($transition-time ease-in-out));
        width: $img-size;
        height: $img-size;
        left: calc(50vw - #{$img-size/2});
        top: $contact-margin-top + $contact-side/2 - $img-size/2;
        font-size: $img-size/1.5;
        background-color: $bg-color;
    }
    .poppin .#{$name} {
        @if $side == bottom or $side == right {
            $adjust: 1;
        } @else if $side == top or $side == left {
            $adjust: -1;
        }

        @if $side == left or $side == right {
            $side: left;
            $perp-side: top;
            $perp-adjust: -1;
        } @else if $side == top or $side == bottom {
            $side: top;
            $perp-side: left;
            $perp-adjust: 1;
        }

        margin-#{$perp-side}: ($contact-side + $img-size)/2*$perp-pct*$perp-adjust; //for adjusting vertically along side

        //makes it hug the rounded part... so ridiculous lmao
        $perp-pct: abs($perp-pct);
        $push: stripUnits(($contact-side + $img-size)/2*$adjust);
        @if $perp-pct > (1 - $denom) {
            $perp-pct-passed: ($perp-pct - 1)/$denom + 1;
            $push: $push + $perp-adjust*($contact-border-width-strip - sqrt((1-$perp-pct-passed)*(1-$perp-pct-passed)*$contact-border-width-strip*$contact-border-width-strip));
        }
        $push: $push*$dir-pct;
        margin-#{$side}: #{$push}vh;
    }
}
//// Refactor for transform3d

@mixin contactImgInitAlt($name, $size-pct, $bg-color, $transition-time, $side, $dir-pct, $perp-pct) {
    //// For pushing images out
    $contact-side-strip: stripUnits($contact-side);
    $contact-border-width-strip: stripUnits($contact-border-width);
    $denom: 2*$contact-border-width-strip/$contact-side-strip;
    $img-size: $size-pct*$contact-side;

    .#{$name} {
        @include vend(transition, ($transition-time ease-in-out));
        width: $img-size;
        height: $img-size;
        left: calc(50vw - #{$img-size/2});
        top: $contact-margin-top + $contact-side/2 - $img-size/2;
        font-size: $img-size/1.5;
        background-color: $bg-color;
    }
    .poppin .#{$name} {
        @if $side == bottom or $side == right {
            $adjust: 1;
        } @else if $side == top or $side == left {
            $adjust: -1;
        }

        @if $side == left or $side == right {
            $side: left;
            $perp-side: top;
            $perp-adjust: -1;
        } @else if $side == top or $side == bottom {
            $side: top;
            $perp-side: left;
            $perp-adjust: 1;
        }

        margin-#{$perp-side}: ($contact-side + $img-size)/2*$perp-pct*$perp-adjust; //for adjusting vertically along side

        //makes it hug the rounded part... so ridiculous lmao
        $perp-pct: abs($perp-pct);
        $push: stripUnits(($contact-side + $img-size)/2*$adjust);
        @if $perp-pct > (1 - $denom) {
            $perp-pct-passed: ($perp-pct - 1)/$denom + 1;
            $push: $push + $perp-adjust*($contact-border-width-strip - sqrt((1-$perp-pct-passed)*(1-$perp-pct-passed)*$contact-border-width-strip*$contact-border-width-strip));
        }
        $push: $push*$dir-pct;
        margin-#{$side}: #{$push}vh;
    }
}